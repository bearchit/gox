{{/* gotype: entgo.io/ent/entc/gen.Type */}}

{{ define "query/additional/available" }}

{{ $builder := $.QueryName }}
{{ $receiver := receiver $builder }}
{{ $annotation := $.Annotations.Available }}

{{ if $annotation }}

func ({{ $receiver }} *{{ $builder }}) Available(opts ...available.QueryOptionFunc) *{{ $builder }} {
	option := &available.QueryOption{At: time.Now()}
	for _, opt := range opts {
		opt(option)
	}

	{{ $predPackage := print (lower $.Name) -}}

	{{ if $annotation.SoftDeletion }}
	{{ $receiver }}.Where(
		{{ $predPackage }}.DeletedAtIsNil(),
	)
	{{- end -}}

	{{- if $annotation.Lifespan }}
	if option.Preview {
		return {{ $receiver }}.Where(
			{{ $predPackage }}.Or(
				{{ $predPackage }}.LifespanEndAtIsNil(),
				{{ $predPackage }}.And(
					{{ $predPackage }}.LifespanEndAtNotNil(),
					{{ $predPackage }}.LifespanEndAtGTE(option.At),
				),
			),
		)
	}
	{{ end }}

	return {{ $receiver }}.Where(
		{{ if $annotation.Activation -}}
		{{ $predPackage }}.ActivationEQ(available.Activated),
		{{ end }}

		{{- if $annotation.Lifespan -}}
		{{ $predPackage }}.Or(
			{{ $predPackage }}.LifespanStartAtIsNil(),
			{{ $predPackage }}.And(
				{{ $predPackage }}.LifespanStartAtNotNil(),
				{{ $predPackage }}.LifespanStartAtLTE(option.At),
			),
		),
		{{ $predPackage }}.Or(
			{{ $predPackage }}.LifespanEndAtIsNil(),
			{{ $predPackage }}.And(
				{{ $predPackage }}.LifespanEndAtNotNil(),
				{{ $predPackage }}.LifespanEndAtGTE(option.At),
			),
		),
		{{ end }}
	)
}
{{ end }}

{{ end }}
