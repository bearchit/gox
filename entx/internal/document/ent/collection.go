// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/bearchit/gox/entx/internal/document/ent/collection"
)

// Collection is the model entity for the Collection schema.
type Collection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LifespanStartAt holds the value of the "lifespan_start_at" field.
	LifespanStartAt time.Time `json:"lifespan_start_at,omitempty"`
	// LifespanEndAt holds the value of the "lifespan_end_at" field.
	LifespanEndAt time.Time `json:"lifespan_end_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Collection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case collection.FieldID:
			values[i] = new(sql.NullInt64)
		case collection.FieldLifespanStartAt, collection.FieldLifespanEndAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Collection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Collection fields.
func (c *Collection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case collection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case collection.FieldLifespanStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lifespan_start_at", values[i])
			} else if value.Valid {
				c.LifespanStartAt = value.Time
			}
		case collection.FieldLifespanEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lifespan_end_at", values[i])
			} else if value.Valid {
				c.LifespanEndAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Collection.
// Note that you need to call Collection.Unwrap() before calling this method if this Collection
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Collection) Update() *CollectionUpdateOne {
	return (&CollectionClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Collection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Collection) Unwrap() *Collection {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Collection is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Collection) String() string {
	var builder strings.Builder
	builder.WriteString("Collection(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", lifespan_start_at=")
	builder.WriteString(c.LifespanStartAt.Format(time.ANSIC))
	builder.WriteString(", lifespan_end_at=")
	builder.WriteString(c.LifespanEndAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Collections is a parsable slice of Collection.
type Collections []*Collection

func (c Collections) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
